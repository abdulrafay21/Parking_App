// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking_App.Models;

#nullable disable

namespace ParkingApp.Migrations
{
    [DbContext(typeof(ParkingAppContext))]
    [Migration("20230303041542_data_seeding")]
    partial class dataseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Parking_App.Models.ParkingSpot", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isBooked")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<DateTime>("timer")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            ID = 10L,
                            city = "lahore",
                            isBooked = false,
                            name = "park1",
                            price = 500,
                            timer = new DateTime(2023, 3, 3, 9, 15, 42, 253, DateTimeKind.Local).AddTicks(6101)
                        },
                        new
                        {
                            ID = 11L,
                            city = "lahore",
                            isBooked = false,
                            name = "park2",
                            price = 600,
                            timer = new DateTime(2023, 3, 3, 9, 15, 42, 253, DateTimeKind.Local).AddTicks(6116)
                        },
                        new
                        {
                            ID = 12L,
                            city = "karachi",
                            isBooked = false,
                            name = "park1",
                            price = 1000,
                            timer = new DateTime(2023, 3, 3, 9, 15, 42, 253, DateTimeKind.Local).AddTicks(6117)
                        },
                        new
                        {
                            ID = 13L,
                            city = "qasur",
                            isBooked = false,
                            name = "park5",
                            price = 200,
                            timer = new DateTime(2023, 3, 3, 9, 15, 42, 253, DateTimeKind.Local).AddTicks(6215)
                        },
                        new
                        {
                            ID = 14L,
                            city = "qasur",
                            isBooked = false,
                            name = "park7",
                            price = 900,
                            timer = new DateTime(2023, 3, 3, 9, 15, 42, 253, DateTimeKind.Local).AddTicks(6217)
                        },
                        new
                        {
                            ID = 19L,
                            city = "lahore",
                            isBooked = false,
                            name = "park5",
                            price = 900,
                            timer = new DateTime(2023, 3, 3, 9, 15, 42, 253, DateTimeKind.Local).AddTicks(6219)
                        });
                });

            modelBuilder.Entity("Parking_App.Models.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
